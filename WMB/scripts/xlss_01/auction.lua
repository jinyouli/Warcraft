-- This file was generated using Luraph Obfuscator v12.5 by memcorrupt.

local kinsuftlIl1lIIl11i11i1IiI1iI = assert local kinsuftIIl11liiIii1ililil1 = select local kinsuftiiIII1Iil1ll1I11i1I = tonumber local kinsuftliI1ii1ilI1i1I1lIII = unpack local kinsuftIlIi1lI1iiiIIii1lI1 = pcall local kinsuftlIl1IIl11l1I1i1iIll = setfenv local kinsuftll11IilliiIll11Iiii = setmetatable local kinsuftiIliI1iliIIllI1iill = type local kinsuftiiil1i1Iliilil1ilIl = getfenv local kinsuftiliiI1iIIIiI1lIiIIi = tostring local kinsuftlIlll11IIIIIl1IiIl1ii = error local kinsuftIi1ll1IlliIi1IIlIiI = string.sub local kinsuftlIill1ll11lllI1IliI = string.byte local kinsuftliIiIillIiIlIl1llI1 = string.char local kinsuftlIl1ll1I1II11IiiI11li = string.rep local kinsuftlIl1ll1l1I1111li1iIlI = string.gsub local kinsuftI1Illi11IIiIl1liI1i = string.match local kinsuftlIl11ii1lIlii1iIi1i11 = table.insert local kinsuftIIli1iiiiI1lliii111 = kinsuftlIill1ll11lllI1IliI("[", 1) local kinsuftIIll11iilI11I1IiIi1, kinsuftI1lIi11liIlil11111I = #{3566}, #{ 5156, 899, 6033, 1297, 347, 2586, 5386, 98, 3130, 6495, 2116, 2346, 4693, 3062, 5484, 803, 2202, 900, 1456, 3836, 2488 } + kinsuftIIli1iiiiI1lliii111 + 130959 local kinsuftliiIll11I1IilillIII = {} local kinsuftliIiIlI1li1i11iIIll = 1 local kinsuftlIlil1IIlIlI1111iI1Ii, kinsuftiiiIIiiIlIiliiiIIli local function kinsuftliii1iI1il111i1I11l(kinsuftIIliIiilIIIlIi1ilii, kinsufti1III11lII11IlIlII1) local kinsuftl1IIillilliI1li1I1i kinsuftIIliIiilIIIlIi1ilii = kinsuftlIl1ll1l1I1111li1iIlI(kinsuftIi1ll1IlliIi1IIlIiI(kinsuftIIliIiilIIIlIi1ilii, 5), "..", function(kinsuftil1l1Iill1i1ll1llii) if kinsuftlIill1ll11lllI1IliI(kinsuftil1l1Iill1i1ll1llii, 2) == 72 then kinsuftl1IIillilliI1li1I1i = kinsuftiiIII1Iil1ll1I11i1I(kinsuftIi1ll1IlliIi1IIlIiI(kinsuftil1l1Iill1i1ll1llii, 1, 1)) return "" else local kinsuftIil11IiI11i111IIlII = kinsuftliIiIillIiIlIl1llI1(kinsuftiiIII1Iil1ll1I11i1I(kinsuftil1l1Iill1i1ll1llii, 16)) if kinsuftl1IIillilliI1li1I1i then local kinsuftiiIlli1iI1l1lillilI = kinsuftlIl1ll1I1II11IiiI11li(kinsuftIil11IiI11i111IIlII, kinsuftl1IIillilliI1li1I1i) kinsuftl1IIillilliI1li1I1i = nil return kinsuftiiIlli1iI1l1lillilI else return kinsuftIil11IiI11i111IIlII end end end) local function kinsuftII11iiiili1il1iliII() local kinsuftiiIi1IilIIIiIliIIli = kinsuftlIill1ll11lllI1IliI(kinsuftIIliIiilIIIlIi1ilii, kinsuftliIiIlI1li1i11iIIll, kinsuftliIiIlI1li1i11iIIll) kinsuftliIiIlI1li1i11iIIll = kinsuftliIiIlI1li1i11iIIll + 1 return kinsuftiiIi1IilIIIiIliIIli end local function kinsuftll1ilII1IiIIIlI111I() local kinsuftiiIi1IilIIIiIliIIli, kinsuftIil11IiI11i111IIlII, kinsuftiiIlli1iI1l1lillilI, kinsuftlIliI1IIiIIIiIIlI1I = kinsuftlIill1ll11lllI1IliI(kinsuftIIliIiilIIIlIi1ilii, kinsuftliIiIlI1li1i11iIIll, kinsuftliIiIlI1li1i11iIIll + 3) kinsuftliIiIlI1li1i11iIIll = kinsuftliIiIlI1li1i11iIIll + 4 return kinsuftlIliI1IIiIIIiIIlI1I * 16777216 + kinsuftiiIlli1iI1l1lillilI * 65536 + kinsuftIil11IiI11i111IIlII * 256 + kinsuftiiIi1IilIIIiIliIIli end local function kinsuftI1IIllIl11ii1li1iI1(kinsuftiIiiilliIIii1I111i1, kinsuftil1IIi11illlil1111l, kinsuftil1IIii1lIIilIiI1Ii) if kinsuftil1IIii1lIIilIiI1Ii then local kinsuftll111I1IlIlI1l1iIll, kinsuftlIliiIIillll1il1Il1Ii = 0, 0 for kinsuftlIlilll11lIlIlllI1lli = kinsuftil1IIi11illlil1111l, kinsuftil1IIii1lIIilIiI1Ii do kinsuftll111I1IlIlI1l1iIll = kinsuftll111I1IlIlI1l1iIll + 2 ^ kinsuftlIliiIIillll1il1Il1Ii * kinsuftI1IIllIl11ii1li1iI1(kinsuftiIiiilliIIii1I111i1, kinsuftlIlilll11lIlIlllI1lli) kinsuftlIliiIIillll1il1Il1Ii = kinsuftlIliiIIillll1il1Il1Ii + 1 end return kinsuftll111I1IlIlI1l1iIll else local kinsuftlIlilIiil1ll1iiIli11i = 2 ^ (kinsuftil1IIi11illlil1111l - 1) return kinsuftlIlilIiil1ll1iiIli11i <= kinsuftiIiiilliIIii1I111i1 % (kinsuftlIlilIiil1ll1iiIli11i + kinsuftlIlilIiil1ll1iiIli11i) and 1 or 0 end end local function kinsuftl11lIIiI1Il1l1IlIl1() local kinsuftiiIi1IilIIIiIliIIli, kinsuftIil11IiI11i111IIlII = kinsuftll1ilII1IiIIIlI111I(), kinsuftll1ilII1IiIIIlI111I() if kinsuftiiIi1IilIIIiIliIIli == 0 and kinsuftIil11IiI11i111IIlII == 0 then return 0 end return (-2 * kinsuftI1IIllIl11ii1li1iI1(kinsuftIil11IiI11i111IIlII, 32) + 1) * 2 ^ (kinsuftI1IIllIl11ii1li1iI1(kinsuftIil11IiI11i111IIlII, 21, 31) - 1023) * ((kinsuftI1IIllIl11ii1li1iI1(kinsuftIil11IiI11i111IIlII, 1, 20) * 4294967296 + kinsuftiiIi1IilIIIiIliIIli) / 4503599627370496 + 1) end local kinsuftlIlliII11Iiiilii11Iil = bit or bit32 local kinsuftlliiliili1l1lliI1II = kinsuftlIlliII11Iiiilii11Iil and kinsuftlIlliII11Iiiilii11Iil.bxor or function(kinsuftiiIi1IilIIIiIliIIli, kinsuftIil11IiI11i111IIlII) local kinsuftl11llll1il11IIii1lI = 1 local kinsuftiiIlli1iI1l1lillilI = 0 while kinsuftiiIi1IilIIIiIliIIli > 0 and kinsuftIil11IiI11i111IIlII > 0 do local kinsuftlIiIlI1I11iiI1lIlli = kinsuftiiIi1IilIIIiIliIIli % 2 local kinsuftilII1II1ill1i1iIIil = kinsuftIil11IiI11i111IIlII % 2 if kinsuftlIiIlI1I11iiI1lIlli ~= kinsuftilII1II1ill1i1iIIil then kinsuftiiIlli1iI1l1lillilI = kinsuftiiIlli1iI1l1lillilI + kinsuftl11llll1il11IIii1lI end kinsuftiiIi1IilIIIiIliIIli = (kinsuftiiIi1IilIIIiIliIIli - kinsuftlIiIlI1I11iiI1lIlli) / 2 kinsuftIil11IiI11i111IIlII = (kinsuftIil11IiI11i111IIlII - kinsuftilII1II1ill1i1iIIil) / 2 kinsuftl11llll1il11IIii1lI = kinsuftl11llll1il11IIii1lI * 2 end if kinsuftiiIi1IilIIIiIliIIli < kinsuftIil11IiI11i111IIlII then kinsuftiiIi1IilIIIiIliIIli = kinsuftIil11IiI11i111IIlII end while kinsuftiiIi1IilIIIiIliIIli > 0 do local kinsuftlIiIlI1I11iiI1lIlli = kinsuftiiIi1IilIIIiIliIIli % 2 if kinsuftlIiIlI1I11iiI1lIlli > 0 then kinsuftiiIlli1iI1l1lillilI = kinsuftiiIlli1iI1l1lillilI + kinsuftl11llll1il11IIii1lI end kinsuftiiIi1IilIIIiIliIIli = (kinsuftiiIi1IilIIIiIliIIli - kinsuftlIiIlI1I11iiI1lIlli) / 2 kinsuftl11llll1il11IIii1lI = kinsuftl11llll1il11IIii1lI * 2 end return kinsuftiiIlli1iI1l1lillilI end local function kinsuftlIlIiIIi1iIliIlIlllIi(kinsuftiiiiIli1IiIlI1i1l11) local kinsuftilIl1liIil1I1iIllll = { kinsuftlIill1ll11lllI1IliI(kinsuftIIliIiilIIIlIi1ilii, kinsuftliIiIlI1li1i11iIIll, kinsuftliIiIlI1li1i11iIIll + 3) } kinsuftliIiIlI1li1i11iIIll = kinsuftliIiIlI1li1i11iIIll + 4 local kinsuftiiIi1IilIIIiIliIIli = kinsuftlliiliili1l1lliI1II(kinsuftilIl1liIil1I1iIllll[1], kinsuftiiiIIiiIlIiliiiIIli) local kinsuftIil11IiI11i111IIlII = kinsuftlliiliili1l1lliI1II(kinsuftilIl1liIil1I1iIllll[2], kinsuftiiiIIiiIlIiliiiIIli) local kinsuftiiIlli1iI1l1lillilI = kinsuftlliiliili1l1lliI1II(kinsuftilIl1liIil1I1iIllll[3], kinsuftiiiIIiiIlIiliiiIIli) local kinsuftlIliI1IIiIIIiIIlI1I = kinsuftlliiliili1l1lliI1II(kinsuftilIl1liIil1I1iIllll[4], kinsuftiiiIIiiIlIiliiiIIli) kinsuftiiiIIiiIlIiliiiIIli = (69 * kinsuftiiiIIiiIlIiliiiIIli + kinsuftiiiiIli1IiIlI1i1l11) % 256 return kinsuftlIliI1IIiIIIiIIlI1I * 16777216 + kinsuftiiIlli1iI1l1lillilI * 65536 + kinsuftIil11IiI11i111IIlII * 256 + kinsuftiiIi1IilIIIiIliIIli end local function kinsuftiii1i1I1I1I1lIlIiI1(kinsufti1Iii1lIlIiIllilIil) local kinsuftlllI1ll1lI1iliiIilI = kinsuftll1ilII1IiIIIlI111I() local kinsuftlIlII111il1I1lIlllIii = "" for kinsuftlIlilll11lIlIlllI1lli = kinsuftIIll11iilI11I1IiIi1, kinsuftlllI1ll1lI1iliiIilI do kinsuftlIlII111il1I1lIlllIii = kinsuftlIlII111il1I1lIlllIii .. kinsuftliIiIillIiIlIl1llI1(kinsuftlliiliili1l1lliI1II(kinsuftlIill1ll11lllI1IliI(kinsuftIIliIiilIIIlIi1ilii, kinsuftliIiIlI1li1i11iIIll + kinsuftlIlilll11lIlIlllI1lli - 1), kinsuftlIlil1IIlIlI1111iI1Ii)) kinsuftlIlil1IIlIlI1111iI1Ii = (kinsufti1Iii1lIlIiIllilIil * kinsuftlIlil1IIlIlI1111iI1Ii + 197) % 256 end kinsuftliIiIlI1li1i11iIIll = kinsuftliIiIlI1li1i11iIIll + kinsuftlllI1ll1lI1iliiIilI return kinsuftlIlII111il1I1lIlllIii end kinsuftlIlil1IIlIlI1111iI1Ii = kinsuftII11iiiili1il1iliII() kinsuftiiiIIiiIlIiliiiIIli = kinsuftII11iiiili1il1iliII() local kinsuftlIlIli11ii1IiIl1lIl1l = {} for kinsuftlIlilll11lIlIlllI1lli = kinsuftIIll11iilI11I1IiIi1, kinsuftII11iiiili1il1iliII() do local kinsuftlii1iI1l1III111I11I = kinsuftII11iiiili1il1iliII() local kinsuftIiI1Ii1i1iI11iIllII = (kinsuftlIlilll11lIlIlllI1lli - 1) * 2 kinsuftlIlIli11ii1IiIl1lIl1l[kinsuftIiI1Ii1i1iI11iIllII] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, 1, 4) kinsuftlIlIli11ii1IiIl1lIl1l[kinsuftIiI1Ii1i1iI11iIllII + 1] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, 5, 8) end local function kinsufti11iii1lIIl11il11li() local kinsuftlIli1ilIlllIiiiiIIll1 = { {}, {}, {}, nil, {}, nil, nil } kinsuftlIli1ilIlllIiiiiIIll1[4] = kinsuftII11iiiili1il1iliII() kinsuftll1ilII1IiIIIlI111I() kinsuftll1ilII1IiIIIlI111I() kinsuftII11iiiili1il1iliII() kinsuftlIli1ilIlllIiiiiIIll1[6] = kinsuftII11iiiili1il1iliII() local kinsuftlIlI1l1liiIiIIllil1II = kinsuftll1ilII1IiIIIlI111I() for kinsuftlIlilll11lIlIlllI1lli = kinsuftIIll11iilI11I1IiIi1, kinsuftlIlI1l1liiIiIIllil1II do kinsuftlIli1ilIlllIiiiiIIll1[1][kinsuftlIlilll11lIlIlllI1lli] = kinsuftll1ilII1IiIIIlI111I() end kinsuftII11iiiili1il1iliII() kinsuftlIli1ilIlllIiiiiIIll1[7] = kinsuftII11iiiili1il1iliII() local kinsuftlIll1Il1lIi1iI1liiill = kinsuftll1ilII1IiIIIlI111I() - (#{ 1387, 2857, 2260, 6300, 664, 6252, 593, 4262, 476, 2716, 5020, 5790, 3279, 4960, 2573, 4221, 2673, 4320, 2392, 2223, 894, 6488, 2568 } + kinsuftIIli1iiiiI1lliii111 + 133638) local kinsuftl1lllli1i11IiiiiII1 = kinsuftII11iiiili1il1iliII() for kinsuftlIlilll11lIlIlllI1lli = kinsuftIIll11iilI11I1IiIi1, kinsuftlIll1Il1lIi1iI1liiill do local kinsuftl1i1Ii1illIil1IiliI = { nil, nil, nil, nil, nil, nil, nil, nil, nil, nil } local kinsuftlii1iI1l1III111I11I = kinsuftlIlIiIIi1iIliIlIlllIi(kinsuftl1lllli1i11IiiiiII1) kinsuftl1i1Ii1illIil1IiliI[3872] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{ 768, 3972, 1415, 5069, 2776, 106, 4309, 866, 710, 6674, 5876, 6898, 2511, 608, 4697, 922, 2534, 4760, 5645, 4968, 2764 } + kinsuftIIli1iiiiI1lliii111 + -85, #{ 3139, 983, 4544, 3000, 2470, 3658, 3066, 5515, 275, 6508, 506, 3488, 1390, 1854, 1903, 3787, 970, 3729, 2732, 6170, 829, 3032, 1061 } + kinsuftIIli1iiiiI1lliii111 + -82) kinsuftl1i1Ii1illIil1IiliI[1] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{720}, #{ 6966, 6154, 3267, 629, 1990, 2331, 1151, 5757, 5532 }) kinsuftl1i1Ii1illIil1IiliI[2] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{ 2449, 408, 4117, 6211, 993, 3686, 1036, 1842, 6546, 2185 }, #{ 717, 4248, 4805, 6737, 6587, 5307, 4669, 4372, 6660, 5800, 4220, 538, 1269, 1775, 1359, 3863, 2753, 5660 }) kinsuftl1i1Ii1illIil1IiliI[7] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{ 1774, 4806, 4624, 3336, 6099, 2494, 3162, 422, 1472, 550, 5513, 3231, 4146, 4719, 1011, 1845, 4083, 1108, 2266 }, #{ 3046, 2196, 4152, 6387, 1801, 1696, 1838, 83, 3100, 5702, 1443, 6160, 4299, 6655, 3642, 2735, 2054, 1622, 2691, 6441, 175, 4560 } + kinsuftIIli1iiiiI1lliii111 + -87) kinsuftl1i1Ii1illIil1IiliI[8] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{3949}, #{ 2666, 5794, 852, 2340, 1620, 219, 6037, 5020, 5601, 1489, 6887, 6448, 6683, 3465, 3818, 2284, 4888, 240 }) kinsuftl1i1Ii1illIil1IiliI[9] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{ 4267, 1134, 6961, 107, 953, 5924, 325, 44, 4796, 6667, 2285, 2998, 1321, 6323, 4622, 689, 5336, 5274, 4896, 2565 } + kinsuftIIli1iiiiI1lliii111 + -84, #{ 2379, 6752, 1163, 4714, 6962, 6438, 6727, 4152, 3340, 3820, 6809, 5554, 4489, 5441, 2939, 1963, 5960, 3758, 357, 1438, 5153, 5587, 2543 } + kinsuftIIli1iiiiI1lliii111 + -82) kinsuftl1i1Ii1illIil1IiliI[106765] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{4200}, #{ 4706, 546, 1995, 5941, 3297, 2508, 1947, 1075, 5264, 4365, 1178, 6027, 1719, 820, 3625, 390, 5020, 5017 }) kinsuftl1i1Ii1illIil1IiliI[66747] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{ 4791, 1912, 3610, 4525, 3325, 3937, 2519, 4500, 5811, 4883 }, #{ 4785, 2645, 4252, 3525, 1675, 5385, 5469, 2357, 6400, 1473, 2375, 4060, 6422, 6061, 2672, 530, 4219, 6628 }) kinsuftl1i1Ii1illIil1IiliI[4113] = kinsuftI1IIllIl11ii1li1iI1(kinsuftlii1iI1l1III111I11I, #{ 5798, 3635, 3343, 6351, 4853, 5872, 3690, 5750, 5265, 6539, 3276, 5218, 3877, 4640, 2847, 4275, 3745, 5299, 2008 }, #{ 1710, 2639, 4834, 4754, 4150, 463, 2951, 3274, 479, 5410, 5007, 3280, 1964, 4851, 5572, 1322, 4093, 1978, 6190, 6631, 2238, 4339, 5038 } + kinsuftIIli1iiiiI1lliii111 + -88) kinsuftlIli1ilIlllIiiiiIIll1[3][kinsuftlIlilll11lIlIlllI1lli] = kinsuftl1i1Ii1illIil1IiliI end local kinsuftlIlI1l1liiIiIIllil1II = kinsuftll1ilII1IiIIIlI111I() for kinsuftlIlilll11lIlIlllI1lli = kinsuftIIll11iilI11I1IiIi1, kinsuftlIlI1l1liiIiIIllil1II do kinsuftlIli1ilIlllIiiiiIIll1[2][kinsuftlIlilll11lIlIlllI1lli - kinsuftIIll11iilI11I1IiIi1] = kinsufti11iii1lIIl11il11li() end local kinsuftlIlI1l1liiIiIIllil1II = kinsuftll1ilII1IiIIIlI111I() - (#{ 5617, 890, 6654, 1430, 813, 2894, 1701, 5910, 6584, 5614, 832, 5694, 2021, 2814, 868, 918, 3066, 165, 5933, 5781, 3335, 2120 } + kinsuftIIli1iiiiI1lliii111 + 133669) local kinsuftiI1lll1II1lIi1iiiIl = kinsuftII11iiiili1il1iliII() for kinsuftlIlilll11lIlIlllI1lli = kinsuftIIll11iilI11I1IiIi1, kinsuftlIlI1l1liiIiIIllil1II do local kinsuftl1I1iIiiIlii11Ii11i local kinsuftiIliI1iliIIllI1iill = kinsuftII11iiiili1il1iliII() if kinsuftiIliI1iliIIllI1iill == #{ 4138, 5425, 6088, 6270, 2495, 6051, 6728, 1208, 5875, 2837, 784, 2124, 5153, 2275, 1255, 358, 1115, 2021, 4808, 3007, 4027, 2645, 1075 } + kinsuftIIli1iiiiI1lliii111 + -53 then kinsuftl1I1iIiiIlii11Ii11i = #{ 3015, 1536, 6726, 2778, 4328, 6814, 761, 1131, 1551, 1856, 6318, 855, 5932, 2457, 3298, 1654, 3751, 877, 1726, 1993, 1170, 856, 3127, 4097 } + kinsuftIIli1iiiiI1lliii111 + 69106 == #{ 3998, 3153, 4389, 2653, 5861, 6736, 3200, 4468, 4598, 738, 2240, 6706, 1247, 5169, 2743, 3816, 2719, 1065, 5176, 1782, 5962, 329, 2052, 1767 } + kinsuftIIli1iiiiI1lliii111 + 132065 end if kinsuftiIliI1iliIIllI1iill == #{ 6145, 3711, 2997, 524, 5447, 393, 2180, 2235, 51, 5516, 5549, 6936, 2280, 2353, 3713, 403, 2034, 1482, 6646, 4097, 2874, 3879, 2713, 6213 } + kinsuftIIli1iiiiI1lliii111 + 17 then kinsuftl1I1iIiiIlii11Ii11i = kinsuftIi1ll1IlliIi1IIlIiI(kinsuftiii1i1I1I1I1lIlIiI1(#{ 4466, 3385, 1167, 3888, 4715, 783, 1500, 6485, 3771, 4527, 4174, 4165, 2067, 2839, 6403, 6667, 3139, 1217, 3574, 5513, 2020, 599, 4633, 1230 } + kinsuftIIli1iiiiI1lliii111 + 5), #{375, 5687}) end if kinsuftiIliI1iliIIllI1iill == #{ 4087, 3093, 785, 2508, 6519, 2517, 3391, 1774, 4160, 5272, 95, 5219, 6060, 4957, 1461 } then kinsuftl1I1iIiiIlii11Ii11i = kinsuftIi1ll1IlliIi1IIlIiI(kinsuftiii1i1I1I1I1lIlIiI1(kinsuftiI1lll1II1lIi1iiiIl), #{ 5456, 1409, 2284 }) end if kinsuftiIliI1iliIIllI1iill == #{ 3839, 2591, 216, 2622, 3215, 1176, 2875, 5577, 5766, 1178, 1538, 1779, 4219, 4171, 11, 6013, 1191, 5763, 757 } then kinsuftl1I1iIiiIlii11Ii11i = kinsuftl11lIIiI1Il1l1IlIl1() end if kinsuftiIliI1iliIIllI1iill == #{ 5458, 2537, 4425, 1845, 1427, 3274, 6457, 533, 679, 2281, 5862, 952, 5055, 5976, 3068, 5537, 5140, 3831, 5223, 577, 2707 } + kinsuftIIli1iiiiI1lliii111 + -88 then kinsuftl1I1iIiiIlii11Ii11i = kinsuftIi1ll1IlliIi1IIlIiI(kinsuftiii1i1I1I1I1lIlIiI1(kinsuftiI1lll1II1lIi1iiiIl), #{ 5456, 1409, 2284 }) end if kinsuftiIliI1iliIIllI1iill == #{ 4902, 2471, 4741, 1886, 5450, 3279, 4125, 5326, 6667, 2493, 2361, 3694, 2290, 2352, 1225, 5434, 550, 952, 3171, 1267, 2067, 2346, 1723, 117 } + kinsuftIIli1iiiiI1lliii111 + 101 then kinsuftl1I1iIiiIlii11Ii11i = kinsuftIi1ll1IlliIi1IIlIiI(kinsuftiii1i1I1I1I1lIlIiI1(kinsuftiI1lll1II1lIi1iiiIl), #{ 6468, 6865, 4582, 3565 }) end if kinsuftiIliI1iliIIllI1iill == #{} then kinsuftl1I1iIiiIlii11Ii11i = kinsuftIi1ll1IlliIi1IIlIiI(kinsuftiii1i1I1I1I1lIlIiI1(insEncKey), #{599, 3039}) end if kinsuftiIliI1iliIIllI1iill == #{ 3000, 2121, 5134, 3721, 756, 6887, 1379, 3133, 2081, 1024, 1937, 3567, 595, 2484, 1483, 497, 5266, 2119, 2746, 5589 } + kinsuftIIli1iiiiI1lliii111 + -16 then kinsuftl1I1iIiiIlii11Ii11i = kinsuftIi1ll1IlliIi1IIlIiI(kinsuftiii1i1I1I1I1lIlIiI1(#{ 4466, 3385, 1167, 3888, 4715, 783, 1500, 6485, 3771, 4527, 4174, 4165, 2067, 2839, 6403, 6667, 3139, 1217, 3574, 5513, 2020, 599, 4633, 1230 } + kinsuftIIli1iiiiI1lliii111 + 5), #{375, 5687}) end if kinsuftiIliI1iliIIllI1iill == #{ 1142, 480, 3458, 4227, 2046, 581, 6853, 3252 } then kinsuftl1I1iIiiIlii11Ii11i = #{ 1332, 6442, 637, 1933, 5787, 6333, 642, 1655, 4518, 468, 4149, 5945, 6102, 5583, 2004, 1247, 5072, 3058, 1402, 1325, 6738 } + kinsuftIIli1iiiiI1lliii111 + 70510 == #{ 1332, 6442, 637, 1933, 5787, 6333, 642, 1655, 4518, 468, 4149, 5945, 6102, 5583, 2004, 1247, 5072, 3058, 1402, 1325, 6738 } + kinsuftIIli1iiiiI1lliii111 + 70510 end kinsuftlIli1ilIlllIiiiiIIll1[5][kinsuftlIlilll11lIlIlllI1lli - kinsuftIIll11iilI11I1IiIi1] = kinsuftl1I1iIiiIlii11Ii11i end for kinsuftlIlilll11lIlIlllI1lli = kinsuftIIll11iilI11I1IiIi1, kinsuftlIll1Il1lIi1iI1liiill do local kinsuftl1i1Ii1illIil1IiliI = kinsuftlIli1ilIlllIiiiiIIll1[3][kinsuftlIlilll11lIlIlllI1lli] local kinsuftlIl1II1lIIi1Iii1111II = kinsuftlIlIli11ii1IiIl1lIl1l[kinsuftl1i1Ii1illIil1IiliI[9]] if kinsuftlIl1II1lIIi1Iii1111II == #{2908} and kinsuftl1i1Ii1illIil1IiliI[1] > 255 then kinsuftl1i1Ii1illIil1IiliI[3] = true kinsuftl1i1Ii1illIil1IiliI[4] = kinsuftlIli1ilIlllIiiiiIIll1[5][kinsuftl1i1Ii1illIil1IiliI[1] - 256] end if kinsuftlIl1II1lIIi1Iii1111II == #{ 3858, 768, 6405 } then if kinsuftl1i1Ii1illIil1IiliI[1] > 255 then kinsuftl1i1Ii1illIil1IiliI[3] = true kinsuftl1i1Ii1illIil1IiliI[4] = kinsuftlIli1ilIlllIiiiiIIll1[5][kinsuftl1i1Ii1illIil1IiliI[1] - 256] end if kinsuftl1i1Ii1illIil1IiliI[2] > 255 then kinsuftl1i1Ii1illIil1IiliI[10] = true kinsuftl1i1Ii1illIil1IiliI[5] = kinsuftlIli1ilIlllIiiiiIIll1[5][kinsuftl1i1Ii1illIil1IiliI[2] - 256] end end if kinsuftlIl1II1lIIi1Iii1111II == #{1168, 1394} and kinsuftl1i1Ii1illIil1IiliI[2] > 255 then kinsuftl1i1Ii1illIil1IiliI[10] = true kinsuftl1i1Ii1illIil1IiliI[5] = kinsuftlIli1ilIlllIiiiiIIll1[5][kinsuftl1i1Ii1illIil1IiliI[2] - 256] end if kinsuftlIl1II1lIIi1Iii1111II == #{ 1508, 805, 2211, 746 } then kinsuftl1i1Ii1illIil1IiliI[6] = kinsuftlIli1ilIlllIiiiiIIll1[5][kinsuftl1i1Ii1illIil1IiliI[8]] end end return kinsuftlIli1ilIlllIiiiiIIll1 end local function kinsuftlliililIi1Iili1lllI(kinsuftlIli1ilIlllIiiiiIIll1, kinsufti1III11lII11IlIlII1, kinsuftlIlIil1i11il1liiiiIII) local kinsufti11lI1i1IiiilIlII11, kinsuftili11li1ll11l1I11i1 = -1, -1 local kinsuftIliiii1l1lI1IIll1ii = kinsuftlIli1ilIlllIiiiiIIll1[3] local kinsufti1i1iIllIiiIl1lI1il = 7 local kinsufti1I11Ill1lliIIiI1I1 = kinsuftlIli1ilIlllIiiiiIIll1[2] local kinsuftl1li1i1liII1ii1Iiil = kinsuftlIli1ilIlllIiiiiIIll1[4] local kinsuftIliiiI11iilllii1il1 = kinsuftlIli1ilIlllIiiiiIIll1[6] local kinsuftlIlllll1l1lliIl11li1I = 9 local kinsufti1Il11l1liI11IiIIIi = kinsuftlIli1ilIlllIiiiiIIll1[1] local kinsuftil1i11liiIlIiiIIiII = 1 local function kinsuftI1I11ilIIIliIIIii1i(...) local kinsuftlIliIIlIiIi1ilIi11Ili = 0 local kinsuftI111iiIl1il1ii1l11i = { kinsuftliI1ii1ilI1i1I1lIII({}, 1, kinsuftIliiiI11iilllii1il1) } local kinsuftiIIliI1llIii1ilIil1 = 1 local kinsuftll11II1iilil1IiIii1 = {} local kinsuftiiIIIii11iIIll1ilIi = {} local kinsufti1III11lII11IlIlII1 = kinsuftiiil1i1Iliilil1ilIl() local kinsufti1llillil1lIiiI1i1I = { ... } local kinsuftIIiilIlIlIiiIlIlliI = #kinsufti1llillil1lIiiI1i1I - 1 for kinsuftlIlilll11lIlIlllI1lli = 0, kinsuftIIiilIlIlIiiIlIlliI do if kinsuftlIlilll11lIlIlllI1lli < kinsuftl1li1i1liII1ii1Iiil then kinsuftI111iiIl1il1ii1l11i[kinsuftlIlilll11lIlIlllI1lli] = kinsufti1llillil1lIiiI1i1I[kinsuftlIlilll11lIlIlllI1lli + 1] end end local function kinsuftlIliiiliii11I1IiI1il1(...) local kinsuftiiIlli1iI1l1lillilI = kinsuftIIl11liiIii1ililil1("#", ...) local kinsuftlIllliii1IiIlI1lIIi11 = { ... } return kinsuftiiIlli1iI1l1lillilI, kinsuftlIllliii1IiIlI1lIIi11 end local function kinsuftlIi1II11iiilIlIIii1() while true do local kinsuftiIliii1I1lIiiiii1lI = kinsuftIliiii1l1lI1IIll1ii[kinsuftiIIliI1llIii1ilIil1] local kinsufti1liIiilI1l1l1ilI11 = kinsuftiIliii1I1lIiiiii1lI[9] kinsuftiIIliI1llIii1ilIil1 = kinsuftiIIliI1llIii1ilIil1 + 1 if kinsufti1liIiilI1l1l1ilI11 >= 6 then if kinsufti1liIiilI1l1l1ilI11 < 9 then if kinsufti1liIiilI1l1l1ilI11 >= 7 then if kinsufti1liIiilI1l1l1ilI11 ~= 8 then local kinsuftIil11IiI11i111IIlII, kinsuftiiIlli1iI1l1lillilI if kinsuftiIliii1I1lIiiiii1lI[3] then kinsuftIil11IiI11i111IIlII = kinsuftiIliii1I1lIiiiii1lI[4] else kinsuftIil11IiI11i111IIlII = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[1]] end if kinsuftiIliii1I1lIiiiii1lI[10] then kinsuftiiIlli1iI1l1lillilI = kinsuftiIliii1I1lIiiiii1lI[5] else kinsuftiiIlli1iI1l1lillilI = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[2]] end kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]][kinsuftIil11IiI11i111IIlII] = kinsuftiiIlli1iI1l1lillilI else kinsuftiIIliI1llIii1ilIil1 = kinsuftiIIliI1llIii1ilIil1 + (kinsuftiIliii1I1lIiiiii1lI[8] - kinsuftI1lIi11liIlil11111I) end else kinsufti1III11lII11IlIlII1[kinsuftiIliii1I1lIiiiii1lI[6]] = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]] end elseif kinsufti1liIiilI1l1l1ilI11 < 11 then if kinsufti1liIiilI1l1l1ilI11 == 10 then local kinsuftIil11IiI11i111IIlII, kinsuftiiIlli1iI1l1lillilI if kinsuftiIliii1I1lIiiiii1lI[3] then kinsuftIil11IiI11i111IIlII = kinsuftiIliii1I1lIiiiii1lI[4] else kinsuftIil11IiI11i111IIlII = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[1]] end if kinsuftiIliii1I1lIiiiii1lI[10] then kinsuftiiIlli1iI1l1lillilI = kinsuftiIliii1I1lIiiiii1lI[5] else kinsuftiiIlli1iI1l1lillilI = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[2]] end if kinsuftIil11IiI11i111IIlII == kinsuftiiIlli1iI1l1lillilI ~= (kinsuftiIliii1I1lIiiiii1lI[7] ~= 0) then kinsuftiIIliI1llIii1ilIil1 = kinsuftiIIliI1llIii1ilIil1 + 1 end else kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]] = { kinsuftliI1ii1ilI1i1I1lIII(kinsuftliiIll11I1IilillIII, 1, kinsuftiIliii1I1lIiiiii1lI[1] == 0 and 255 or kinsuftiIliii1I1lIiiiii1lI[1]) } end elseif kinsufti1liIiilI1l1l1ilI11 == 12 then if kinsuftiIliii1I1lIiiiii1lI[2] == 231 then kinsuftiIIliI1llIii1ilIil1 = kinsuftiIIliI1llIii1ilIil1 - 1 kinsuftIliiii1l1lI1IIll1ii[kinsuftiIIliI1llIii1ilIil1] = { [9] = 1, [7] = (kinsuftiIliii1I1lIiiiii1lI[7] - 19) % 256, [1] = (kinsuftiIliii1I1lIiiiii1lI[1] - 19) % 256 } else kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]] = #kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[1]] end else kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]] = kinsuftiIliii1I1lIiiiii1lI[6] end elseif kinsufti1liIiilI1l1l1ilI11 < 3 then if kinsufti1liIiilI1l1l1ilI11 < 1 then local kinsuftIlIl1iIlliiiIi1Il11 = kinsufti1I11Ill1lliIIiI1I1[kinsuftiIliii1I1lIiiiii1lI[8]] local kinsuftIl11I1lIIi1IiIliil1 = {} if kinsuftIlIl1iIlliiiIi1Il11[kinsufti1i1iIllIiiIl1lI1il] > 0 then do local kinsuftlIl1IIil1Ii1l1lilII1l = {} kinsuftIl11I1lIIi1IiIliil1 = kinsuftll11IilliiIll11Iiii({}, { __index = function(kinsuftlIllliii1IiIlI1lIIi11, kinsuftiII1lllIi1ii1i1I1lI) local kinsuftlIl1i1i11iIl1IiII1lIl = kinsuftlIl1IIil1Ii1l1lilII1l[kinsuftiII1lllIi1ii1i1I1lI] return kinsuftlIl1i1i11iIl1IiII1lIl[1][kinsuftlIl1i1i11iIl1IiII1lIl[2]] end, __newindex = function(kinsuftlIllliii1IiIlI1lIIi11, kinsuftiII1lllIi1ii1i1I1lI, kinsuftIl1ii111iiliiI11ill) local kinsuftlIl1i1i11iIl1IiII1lIl = kinsuftlIl1IIil1Ii1l1lilII1l[kinsuftiII1lllIi1ii1i1I1lI] kinsuftlIl1i1i11iIl1IiII1lIl[1][kinsuftlIl1i1i11iIl1IiII1lIl[2]] = kinsuftIl1ii111iiliiI11ill end }) for kinsuftlIlilll11lIlIlllI1lli = 1, kinsuftIlIl1iIlliiiIi1Il11[kinsufti1i1iIllIiiIl1lI1il] do local kinsuftlIlIIiIilI1ili1lli1l1 = kinsuftIliiii1l1lI1IIll1ii[kinsuftiIIliI1llIii1ilIil1] if kinsuftlIlIIiIilI1ili1lli1l1[kinsuftlIlllll1l1lliIl11li1I] == kinsufti11lI1i1IiiilIlII11 then kinsuftlIl1IIil1Ii1l1lilII1l[kinsuftlIlilll11lIlIlllI1lli - 1] = { kinsuftI111iiIl1il1ii1l11i, kinsuftlIlIIiIilI1ili1lli1l1[kinsuftil1i11liiIlIiiIIiII] } elseif kinsuftlIlIIiIilI1ili1lli1l1[kinsuftlIlllll1l1lliIl11li1I] == kinsuftili11li1ll11l1I11i1 then kinsuftlIl1IIil1Ii1l1lilII1l[kinsuftlIlilll11lIlIlllI1lli - 1] = { kinsuftlIlIil1i11il1liiiiIII, kinsuftlIlIIiIilI1ili1lli1l1[kinsuftil1i11liiIlIiiIIiII] } end kinsuftiIIliI1llIii1ilIil1 = kinsuftiIIliI1llIii1ilIil1 + 1 end if not kinsuftll11II1iilil1IiIii1[kinsuftI111iiIl1il1ii1l11i] then kinsuftll11II1iilil1IiIii1[kinsuftI111iiIl1il1ii1l11i] = {kinsuftlIl1IIil1Ii1l1lilII1l} else kinsuftlIl11ii1lIlii1iIi1i11(kinsuftll11II1iilil1IiIii1[kinsuftI111iiIl1il1ii1l11i], kinsuftlIl1IIil1Ii1l1lilII1l) end end end local kinsuftI11l1lIiIli1lIl11iI = kinsuftlliililIi1Iili1lllI(kinsuftIlIl1iIlliiiIi1Il11, kinsufti1III11lII11IlIlII1, kinsuftIl11I1lIIi1IiIliil1) kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]] = kinsuftI11l1lIiIli1lIl11iI elseif kinsufti1liIiilI1l1l1ilI11 ~= 2 then kinsuftll11II1iilil1IiIii1[kinsuftI111iiIl1il1ii1l11i] = nil local kinsuftlIl1i1I11Iil1i1l1illI = kinsuftiIliii1I1lIiiiii1lI[7] local kinsuftI1lII1l11I1llIl1IIl = kinsuftiIliii1I1lIiiiii1lI[1] if kinsuftI1lII1l11I1llIl1IIl == 1 then return true end local kinsuftlI1IIilliiIill11l1I = kinsuftlIl1i1I11Iil1i1l1illI + kinsuftI1lII1l11I1llIl1IIl - 2 if kinsuftI1lII1l11I1llIl1IIl == 0 then kinsuftlI1IIilliiIill11l1I = kinsuftlIliIIlIiIi1ilIi11Ili end return true, kinsuftlIl1i1I11Iil1i1l1illI, kinsuftlI1IIilliiIill11l1I else kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]] = kinsufti1III11lII11IlIlII1[kinsuftiIliii1I1lIiiiii1lI[6]] end elseif kinsufti1liIiilI1l1l1ilI11 < 4 then local kinsuftIiI1Ii1i1iI11iIllII = (kinsuftiIliii1I1lIiiiii1lI[2] - 1) * 50 local kinsuftllllllllI1i1I11illi = kinsuftiIliii1I1lIiiiii1lI[1] if kinsuftllllllllI1i1I11illi == 0 then kinsuftllllllllI1i1I11illi = kinsuftlIliIIlIiIi1ilIi11Ili - kinsuftiIliii1I1lIiiiii1lI[7] end for kinsuftlIlilll11lIlIlllI1lli = 1, kinsuftllllllllI1i1I11illi do kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]][kinsuftIiI1Ii1i1iI11iIllII + kinsuftlIlilll11lIlIlllI1lli] = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7] + kinsuftlIlilll11lIlIlllI1lli] end elseif kinsufti1liIiilI1l1l1ilI11 ~= 5 then local kinsuftlIl1i1I11Iil1i1l1illI = kinsuftiIliii1I1lIiiiii1lI[7] local kinsufti1llillil1lIiiI1i1I = kinsuftiIliii1I1lIiiiii1lI[1] local kinsuftlIliI1IlilIiiiIIllIIi = kinsuftiIliii1I1lIiiiii1lI[2] local kinsufti1Iiil11IiI1I11liII, kinsuftlI1IIilliiIill11l1I, kinsuftlIi1II11iiilIlIIii1 if kinsufti1llillil1lIiiI1i1I ~= 1 then if kinsufti1llillil1lIiiI1i1I ~= 0 then kinsuftlI1IIilliiIill11l1I = kinsuftlIl1i1I11Iil1i1l1illI + kinsufti1llillil1lIiiI1i1I - 1 else kinsuftlI1IIilliiIill11l1I = kinsuftlIliIIlIiIi1ilIi11Ili end kinsuftlI1IIilliiIill11l1I, kinsufti1Iiil11IiI1I11liII = kinsuftlIliiiliii11I1IiI1il1(kinsuftI111iiIl1il1ii1l11i[kinsuftlIl1i1I11Iil1i1l1illI](kinsuftliI1ii1ilI1i1I1lIII(kinsuftI111iiIl1il1ii1l11i, kinsuftlIl1i1I11Iil1i1l1illI + 1, kinsuftlI1IIilliiIill11l1I))) else kinsuftlI1IIilliiIill11l1I, kinsufti1Iiil11IiI1I11liII = kinsuftlIliiiliii11I1IiI1il1(kinsuftI111iiIl1il1ii1l11i[kinsuftlIl1i1I11Iil1i1l1illI]()) end if kinsuftlIliI1IlilIiiiIIllIIi ~= 1 then if kinsuftlIliI1IlilIiiiIIllIIi ~= 0 then kinsuftlI1IIilliiIill11l1I = kinsuftlIl1i1I11Iil1i1l1illI + kinsuftlIliI1IlilIiiiIIllIIi - 2 kinsuftlIliIIlIiIi1ilIi11Ili = kinsuftlI1IIilliiIill11l1I + 1 else kinsuftlI1IIilliiIill11l1I = kinsuftlI1IIilliiIill11l1I + kinsuftlIl1i1I11Iil1i1l1illI - 1 kinsuftlIliIIlIiIi1ilIi11Ili = kinsuftlI1IIilliiIill11l1I end kinsuftlIi1II11iiilIlIIii1 = 0 for kinsuftlIlilll11lIlIlllI1lli = kinsuftlIl1i1I11Iil1i1l1illI, kinsuftlI1IIilliiIill11l1I do kinsuftlIi1II11iiilIlIIii1 = kinsuftlIi1II11iiilIlIIii1 + 1 kinsuftI111iiIl1il1ii1l11i[kinsuftlIlilll11lIlIlllI1lli] = kinsufti1Iiil11IiI1I11liII[kinsuftlIi1II11iiilIlIIii1] end else kinsuftlIliIIlIiIi1ilIi11Ili = kinsuftlIl1i1I11Iil1i1l1illI - 1 end for kinsuftlIlilll11lIlIlllI1lli = kinsuftlIliIIlIiIi1ilIi11Ili + 1, kinsuftIliiiI11iilllii1il1 do kinsuftI111iiIl1il1ii1l11i[kinsuftlIlilll11lIlIlllI1lli] = nil end else local kinsuftiiIlli1iI1l1lillilI if kinsuftiIliii1I1lIiiiii1lI[10] then kinsuftiiIlli1iI1l1lillilI = kinsuftiIliii1I1lIiiiii1lI[5] else kinsuftiiIlli1iI1l1lillilI = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[2]] end kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[7]] = kinsuftI111iiIl1il1ii1l11i[kinsuftiIliii1I1lIiiiii1lI[1]][kinsuftiiIlli1iI1l1lillilI] end end end local kinsuftiIII1lll1il111lilii, kinsuftlIlII111il1I1lIlllIii, kinsuftl1I1iIIliIIIiiIIIll, kinsuftlIll11iiIiIIi11i1iIi1 = kinsuftIlIi1lI1iiiIIii1lI1(kinsuftlIi1II11iiilIlIIii1) if kinsuftiIII1lll1il111lilii then if kinsuftl1I1iIIliIIIiiIIIll then return kinsuftliI1ii1ilI1i1I1lIII(kinsuftI111iiIl1il1ii1l11i, kinsuftl1I1iIIliIIIiiIIIll, kinsuftlIll11iiIiIIi11i1iIi1) end else kinsuftlIlll11IIIIIl1IiIl1ii("Luraph Script:" .. (kinsufti1Il11l1liI11IiIIIi[kinsuftiIIliI1llIii1ilIil1 - 1] or "") .. ": " .. kinsuftiliiI1iIIIiI1lIiIIi(kinsuftlIlII111il1I1lIlllIii), 0) end end kinsuftlIl1IIl11l1I1i1iIll(kinsuftI1I11ilIIIliIIIii1i, kinsufti1III11lII11IlIlII1) return kinsuftI1I11ilIIIliIIIii1i end local kinsuftIlI1IIlIlli1llliIil = kinsufti11iii1lIIl11il11li() return kinsuftlliililIi1Iili1lllI(kinsuftIlI1IIlIlli1llliIil, kinsufti1III11lII11IlIlII1)() end kinsuftliii1iI1il111i1I11lkinsuftiiil1i1Iliilil1ilIl()) 